This is the 'readme' of the oasysnav files that I made to scrape data from oasys for efficient data collection. The most recent file was oasysnav_NPE.py, which I used to try to find the 'start point' of when a client decided to get treatment from Hulme Orthodontics. That will be the file this is centered around. I recommend having a tab of Google and ChatGPT open to answer any questions you may have here. Alternatively if you want to turn your brain off you could probably just copy and paste this whole thing into ChatGPT and it would tell you step by step what to do.

DESCRIPTION:
oasysnav_NPE.py takes an input file of names formatted 'Doe, John' and goes through it line by line, searching for specific things that it may see on the screen. It basically uses pyauto, a python library, combined with a bunch of if else statements to navigate to and record the data needed that an interactive report cannot supply. Depending on how the search goes, it should put the name in one of a few files, such as notFound.txt, objFound.txt, or something like that. From these files you should be able to import them to an excel sheet by treating them as a .csv, delimited by ';'. 

This is a slow process (still faster than a human though), so if interactive reports or other means can be used to get the data you need, try those first. I would say if you have more than 150 names to get through and a spare flashdrive, this is probably worth figuring out.

SETUP:
oasysnav_NPE.py should be found in the following directory from any work PC with connection to the V drive (the main server): "V:\Users\Quality Coordinator\Data Science\Jay'sStorageBox\Flashdrive Contents\Hulme\pyauto". If you are reading this, you can find the python file. For the sake of ease, and assuming you won't have access to the same PC every day, running the file from a flashdrive will be your best bet. 

Copy the contents of 'Flashdrive Contents' onto a flashdrive. You will probably want 8GB free on the drive just to be safe. Make the flashdrive the 'd' drive using windows' disk management tool. The script assumes the drive hosting it is the 'd' drive, so unless you change every instance of it in the python script, it will be easier to change the name of the drive to match the script.

Assuming that is done, you will want to navigate to and open 'd:\VSCode\Code.exe'. This is VSC, the code editor you should use to read and edit oasysnav_NPE.py . Once its open, if you don't see the file already there, press CTRL + 'o', and open 'd:\hulme\pyauto\oasysnav_NPE.py'. If you are doing exactly what I was doing (finding the doctor and TC at the responsible for a patient's start), you don't need to edit anything really. Otherwise, MAKE A COPY, and then look at changing the find info function to meet your needs (lines 145 - 260). Everything else in the script should already handle basic things such as navigating to the specific patient's treatment card, handling the 'ignore' pop up's, and putting patient names in the appropriate text files. Again, ChatGPT is going to be helpful here if you need to tweak this function.

Regardless of whether you need to edit the find info function, you will most likely need to edit the boundary box coordinates (lines 31 - 34). The bboxes tell the script where to look to find certain things, so that it doesn't get lost looking in the wrong spots. For example, datebbox is the little vertical strip where the month value can be seen for the date of each visit for a patient (the background is probably green). You can find out the bbox coords by running another python program in the same directory named 'tinkter.py', and by highlighting the new bbox. I'll get to how to do that in a second. The only other edit you may need to make is changing the 'close.png' image found in 'd:\hulme\pyauto\pyimages'. This should only be necessary if the cancel button for the treatment card has a red circle with a line through it, instead of a gray arrow pointing to the side. If you do need to change it, open the snipping tool, take a little snip of the button, press CTRL + 's', and save it to the same directory as 'close', replacing the previous 'close.png'.

As far as actually running oasysnav_NPE.py and tinkter.py (if you need to edit bbox coords), you will do that through window's powershell, so open powershell. Navigate to the right directory by entering 'cd d:\hulme\pyauto' (don't include in the single quotes). Now you will need lines 2 - 3 from VSC, which should read:
$env:PATH = "d:\winpython;" + $env:PATH
$env:PATH = "d:\winpython\scripts;" + $env:PATH
Copy and paste these lines, one by one, into the powershell, hitting ENTER each time. This will set a PATH temporarily on the computer, so that it can use python from the flashdrive to run the script. After that you can type 'python --version' and hit ENTER and it should say 3.something.something, if it recognizes python.

You should be able to run the python programs now, by typing 'python [name of python program].py' and hitting ENTER. If you need to, run tinkter.py and get the bboxes you need, and then edit the values in oasysnav_NPE.py. Otherwise you should be able to run oasysnav_NPE.py by typing in the following line:
python oasysnav_NPE.py
If it throws an error of a missing module or something along those lines, enter the following line:
pip install pyautogui pytesseract pillow opencv-python screeninfo
This is also found on line 6 in VSC, it should make sure that the proper dependencies are installed, in case this is being ran on a new computer.

Finally, edit the input.txt file found in 'd:\hulme\pyauto\scriptFiles' to include the names and dates that you actually need to collect data with. Make sure the names go line by line, as the file will iterate through line by line. Make sure the formatting stays the same.

OTHER NOTES:
Be sure to use Google and ChatGPT, as they are great resources. Also if you already know python, feel free to make a copy and improve this script even more. I refactored it, but it's hardly industry standard. Also there are other features as well that I couldn't get to work, such as having it match exact dates by text recognition. I had to settle for month image recognition. You may also want to mess with the time.sleep for loops, because 4 does seem high, but the lower you go the more likely it is that you run into the ignore pop ups causing issues with the daemon thread not being fast enough. Anyways, good luck!